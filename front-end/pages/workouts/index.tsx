import Header from "@/components/header";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useTranslation } from "next-i18next";
import styles from "@/styles/Home.module.css";
import { Workout } from "@/types";
import WorkoutService from "@/services/WorkoutService";
import useSWR, { mutate } from "swr";
import useInterval from "use-interval";
import UserService from "@/services/UserService";
import WorkoutOverview from "@/components/workouts/workoutOverview";
import React from "react";

const Workouts: React.FC = () => {
  const [token, setToken] = useState<string | null>(null);

  const [isLoggedIn, setIsLoggedIn] = useState<boolean | null>(null);
  const [workouts, setWorkouts] = useState<Array<Workout>>([]);
  const [typeColorMap, setTypeColorMap] = useState<Record<string, string>>({});
  const [userEmail, setUserEmail] = useState<string | null>(null);
  const [weekOffset, setWeekOffset] = useState(0);
  const [showModal, setShowModal] = useState(false);

  const getStartOfWeek = (date: Date): Date => {
    const day = date.getDay();
    const diff = date.getDate() - day + (day === 0 ? -6 : 1);
    return new Date(date.setDate(diff));
  };

  const getEndOfWeek = (start: Date): Date => {
    const end = new Date(start);
    end.setDate(start.getDate() + 6);
    return end;
  };
  const currentDate = new Date();
  const currentWeekStart = getStartOfWeek(
    new Date(currentDate.setDate(currentDate.getDate() + weekOffset * 7))
  );
  const currentWeekEnd = getEndOfWeek(currentWeekStart);

  const weekDays = Array.from({ length: 7 }, (_, i) => {
    const d = new Date(currentWeekStart);
    d.setDate(currentWeekStart.getDate() + i);
    return {
      label: d.toLocaleDateString("en-US", { weekday: "long" }),
      iso: d.toISOString().slice(0, 10),
    };
  });

  const fetchWorkouts = async (email: string) => {
    try {
      const response = await WorkoutService.getWorkoutsByUser(email);
      const data = await response.json();
      const parsedData = data.map((workout: Workout) => ({
        ...workout,
        date: new Date(workout.date),
      }));
      setWorkouts(parsedData);
    } catch (error) {
      console.error("Failed to fetch workouts:", error);
    }
  };

  const normalizeDate = (date: Date): Date =>
    new Date(date.getFullYear(), date.getMonth(), date.getDate());

  const weeklyWorkouts = workouts.filter((workout) => {
    const workoutDate = normalizeDate(new Date(workout.date));
    return (
      workoutDate >= normalizeDate(currentWeekStart) &&
      workoutDate <= normalizeDate(currentWeekEnd)
    );
  });

  const fetchUser = async (email: string, token: string) => {
    return await UserService.getUserByEmail(email, token);
  };

  const { data: user, error: userError } = useSWR(
    userEmail && token ? ["user", userEmail, token] : null,
    ([, email, token]) => fetchUser(email, token)
  );

  const formatDate = (date: Date): string => {
    return date.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
    });
  };

  useInterval(() => {
    if (token && userEmail) {
      mutate(["workouts", token]);
      fetchWorkouts(userEmail);
    }
  }, 2000);

  useEffect(() => {
    const userData = sessionStorage.getItem("loggedInUser");
    if (userData) {
      try {
        const parsed = JSON.parse(userData);
        const { email, token } = parsed;
        setUserEmail(email);
        setToken(token);
        setIsLoggedIn(!!token);
      } catch (error) {
        console.error("Error parsing session storage data:", error);
        setIsLoggedIn(false);
      }
    } else {
      setIsLoggedIn(false);
    }
  }, [userEmail]);

  useEffect(() => {
    if (userEmail) {
      fetchWorkouts(userEmail);
    }
  }, [userEmail]);

  return (
    <>
      <Head>
        <title> Workouts </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.flexHeader}>
        <Header />
        <main className={styles.mainWorkouts}>
          <section className={styles.workoutContent}>
            {user ? (
              <div className={styles.buttonsPlusWorkoutOverview}>
                <div className={styles.NextWeekButtons}>
                  <button
                    onClick={() => setWeekOffset(weekOffset - 1)}
                    className={styles.previousWeekButton}
                  >
                    {"<"}
                  </button>
                  <div className={styles.weekDateRange}>
                    {formatDate(currentWeekStart)} -{" "}
                    {formatDate(currentWeekEnd)}
                  </div>
                  <button
                    onClick={() => setWeekOffset(weekOffset + 1)}
                    className={styles.nextWeekButton}
                  >
                    {">"}
                  </button>
                </div>

                <WorkoutOverview workouts={weeklyWorkouts} user={user} />
              </div>
            ) : (
              <p>Please Log In</p>
            )}
          </section>
        </main>
      </div>
      {user && (
        <CreateWorkoutModal
          isOpen={modalOpen}
          initialDate={selectedDate}
          token={token!}
          userId={user.id}
          onClose={handleCloseModal}
          onSaved={handleSaved}
        />
      )}
    </>
  );
};

export default Workouts;
